<Type Name="CCTMXLayer" FullName="CocosSharp.CCTMXLayer">
  <TypeSignature Language="C#" Value="public class CCTMXLayer : CocosSharp.CCSpriteBatchNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCTMXLayer extends CocosSharp.CCSpriteBatchNode" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCSpriteBatchNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para> represents the TMX layer. </para>
    </summary>
    <remarks>
      <para>It is a subclass of <see cref="T:CocosSharp.CCSpriteBatchNode" />. By default the tiles are rendered using a <see cref="T:CocosSharp.CCTextureAtlas" />. If you modify a tile on runtime, then, that tile will become a <see cref="T:CocosSharp.CCSprite" />, otherwise no <see cref="T:CocosSharp.CCSprite" /> objects are created. The benefits of using <see cref="T:CocosSharp.CCSprite" /> objects as tiles are:<list type="bullet" /></para>
      <see cref="T:CocosSharp.CCSpriteBatchNode" />
      <see cref="T:CocosSharp.CCTextureAtlas" />
      <see cref="T:CocosSharp.CCSprite" />
      <see cref="T:CocosSharp.CCSprite" />
      <see cref="T:CocosSharp.CCSprite" />
      <list type="bullet" />
      <para>If the layer contains a property named "cc_vertexz" with an integer (in can be positive or negative), then all the tiles belonging to the layer will use that value as their OpenGL vertex Z for depth.</para>
      <para>On the other hand, if the "cc_vertexz" property has the "automatic" value, then the tiles will use an automatic vertex Z value. Also before drawing the tiles, GL_ALPHA_TEST will be enabled, and disabled after drawing them. The used alpha func will be:</para>
      <para>glAlphaFunc( GL_GREATER, value )</para>
      <para>"value" by default is 0, but you can change it from Tiled by adding the "cc_alpha_func" property to the layer. The value 0 should work for most cases, but if you have tiles that are semi-transparent, then you might want to use a different value, like 0.5.</para>
      <para>For further information, please see the programming guide:</para>
      <para>
        <ulink url="http://www.cocos2d-iphone.org/wiki/doku.php/prog_guide:tiled_maps">http://www.cocos2d-iphone.org/wiki/doku.php/prog_guide:tiled_maps</ulink>
      </para>
      <ulink url="http://www.cocos2d-iphone.org/wiki/doku.php/prog_guide:tiled_maps">http://www.cocos2d-iphone.org/wiki/doku.php/prog_guide:tiled_maps</ulink>
      <para>
        <para>v0.8.1 Tiles can have tile flags for additional properties. At the moment only flip horizontal and flip vertical are used. These bit flags are defined in TMXXMLParser.h.</para>
        <simplesectsep />
        <para>1.1 </para>
      </para>
      <para>v0.8.1 Tiles can have tile flags for additional properties. At the moment only flip horizontal and flip vertical are used. These bit flags are defined in TMXXMLParser.h.</para>
      <simplesectsep />
      <para>1.1 </para>
      <item>
        <description>tiles (Sprite) can be rotated/scaled/moved with a nice API</description>
      </item>
      <description>tiles (Sprite) can be rotated/scaled/moved with a nice API</description>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer (CocosSharp.CCTMXTilesetInfo tileSetInfo, CocosSharp.CCTMXLayerInfo layerInfo, CocosSharp.CCTMXMapInfo mapInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCTMXTilesetInfo tileSetInfo, class CocosSharp.CCTMXLayerInfo layerInfo, class CocosSharp.CCTMXMapInfo mapInfo) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="tileSetInfo" Type="CocosSharp.CCTMXTilesetInfo" />
        <Parameter Name="layerInfo" Type="CocosSharp.CCTMXLayerInfo" />
        <Parameter Name="mapInfo" Type="CocosSharp.CCTMXMapInfo" />
      </Parameters>
      <Docs>
        <param name="tileSetInfo">To be added.</param>
        <param name="layerInfo">To be added.</param>
        <param name="mapInfo">To be added.</param>
        <summary>creates a  with an tileset info, a layer info and a map info </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public override void AddChild (CocosSharp.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddChild(class CocosSharp.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <param name="tag">To be added.</param>
        <summary> doesn't support adding a  manually. addchild(z, tag); is not supported on . Instead of setTileGID. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="protected override void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Layer">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCLayer Layer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCLayer Layer" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCLayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerName">
      <MemberSignature Language="C#" Value="public string LayerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayerName" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerOrientation">
      <MemberSignature Language="C#" Value="public CocosSharp.CCTMXOrientation LayerOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCTMXOrientation LayerOrientation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCTMXOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerSize">
      <MemberSignature Language="C#" Value="public CocosSharp.CCSize LayerSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize LayerSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>set# LayerSize </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MapTileSize">
      <MemberSignature Language="C#" Value="public CocosSharp.CCSize MapTileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize MapTileSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>set# MapTileSize </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PositionAt">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint PositionAt (CocosSharp.CCPoint tileCoord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CocosSharp.CCPoint PositionAt(valuetype CocosSharp.CCPoint tileCoord) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileCoord" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="tileCoord">To be added.</param>
        <summary>returns the position in points of a given tile coordinate </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PositionAt">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint PositionAt (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CocosSharp.CCPoint PositionAt(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;string,string&gt; Properties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, string&gt; Properties" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>setProperties </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PropertyNamed">
      <MemberSignature Language="C#" Value="public virtual string PropertyNamed (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string PropertyNamed(string propertyName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>return the value for the specific property name </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReleaseMap">
      <MemberSignature Language="C#" Value="public virtual void ReleaseMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMap() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>dealloc the map that contains the tile position from memory.
 Unless you want to know at runtime the tiles positions, you can safely call this method. If you are going to call layer-&gt;tileGIDAt() then, don't release the map </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override void RemoveChild (CocosSharp.CCNode node, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveChild(class CocosSharp.CCNode node, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="CocosSharp.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="node">The child node which will be removed. </param>
        <param name="cleanup">true if all running actions and callbacks on the child node will be cleanup, false otherwise. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>
          <para>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTileAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveTileAt (CocosSharp.CCPoint pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTileAt(valuetype CocosSharp.CCPoint pos) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="pos">To be added.</param>
        <summary>removes a tile at given tile coordinate </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCScene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene Scene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGID">
      <MemberSignature Language="C#" Value="public virtual void SetTileGID (uint gid, CocosSharp.CCPoint pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGID(unsigned int32 gid, valuetype CocosSharp.CCPoint pos) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gid" Type="System.UInt32" />
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="gid">To be added.</param>
        <param name="pos">To be added.</param>
        <summary>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed.</summary>
        <remarks>
          <para>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed.</para>
          <para>Use withFlags if the tile flags need to be changed as well </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGID">
      <MemberSignature Language="C#" Value="public virtual void SetTileGID (uint gid, CocosSharp.CCPoint pos, uint flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGID(unsigned int32 gid, valuetype CocosSharp.CCPoint pos, unsigned int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gid" Type="System.UInt32" />
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
        <Parameter Name="flags" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="gid">To be added.</param>
        <param name="pos">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileAt">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCSprite TileAt (CocosSharp.CCPoint pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CocosSharp.CCSprite TileAt(valuetype CocosSharp.CCPoint pos) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSprite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="pos">To be added.</param>
        <summary>returns the tile (Sprite) at a given a tile coordinate.
 The returned  will be already added to the . Don't add it again. The  can be treated like any other : rotated, scaled, translated, opacity, color, etc. You can remove either by calling:</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <verbatim>returns the tile (Sprite) at a given a tile coordinate.
</verbatim> The returned <see cref="T:CocosSharp.CCSprite" /> will be already added to the <see cref="T:CocosSharp.CCTMXLayer" />. Don't add it again. The <see cref="T:CocosSharp.CCSprite" /> can be treated like any other <see cref="T:CocosSharp.CCSprite" />: rotated, scaled, translated, opacity, color, etc. You can remove either by calling:<list type="bullet" /></para>
          <verbatim>returns the tile (Sprite) at a given a tile coordinate.
</verbatim>
          <see cref="T:CocosSharp.CCSprite" />
          <see cref="T:CocosSharp.CCTMXLayer" />
          <see cref="T:CocosSharp.CCSprite" />
          <see cref="T:CocosSharp.CCSprite" />
          <list type="bullet" />
          <item>
            <description>layer-&gt;removeChild(sprite, cleanup);</description>
          </item>
          <description>layer-&gt;removeChild(sprite, cleanup);</description>
          <item>
            <description>or layer-&gt;removeTileAt(Point(x,y)); </description>
          </item>
          <description>or layer-&gt;removeTileAt(Point(x,y)); </description>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TileAt">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCSprite TileAt (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CocosSharp.CCSprite TileAt(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSprite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileGIDAt">
      <MemberSignature Language="C#" Value="public virtual uint TileGIDAt (CocosSharp.CCPoint pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 TileGIDAt(valuetype CocosSharp.CCPoint pos) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="pos">To be added.</param>
        <summary>returns the tile gid at a given tile coordinate. It also returns the tile flags. This method requires the the tile map has not been previously released (eg. don't call [layer releaseMap]) </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TileGIDAt">
      <MemberSignature Language="C#" Value="public virtual uint TileGIDAt (CocosSharp.CCPoint pos, out uint flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 TileGIDAt(valuetype CocosSharp.CCPoint pos, unsigned int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="CocosSharp.CCPoint" />
        <Parameter Name="flags" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pos">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileGIDAt">
      <MemberSignature Language="C#" Value="public virtual uint TileGIDAt (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 TileGIDAt(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileGIDAt">
      <MemberSignature Language="C#" Value="public virtual uint TileGIDAt (float x, float y, out uint flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 TileGIDAt(float32 x, float32 y, unsigned int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="flags" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tiles">
      <MemberSignature Language="C#" Value="public uint[] Tiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32[] Tiles" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSet">
      <MemberSignature Language="C#" Value="public CocosSharp.CCTMXTilesetInfo TileSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCTMXTilesetInfo TileSet" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCTMXTilesetInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>setTileSet </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
