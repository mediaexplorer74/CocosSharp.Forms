<Type Name="CCActionState" FullName="CocosSharp.CCActionState">
  <TypeSignature Language="C#" Value="public abstract class CCActionState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CCActionState extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsulates the state of an action that is currently executing.</summary>
    <remarks>
      <para>
	The <see cref="T:CocosSharp.CCAction" /> objects are immutable in
	CocosSharp.  When the method <see cref="M:CocosSharp.CCAction.StartAction" /> is invoked, a new
	state object is created to keep track of the state of the object
	over time.
      </para>
      <para>

	The CCActionState is initialized with both the immutable
	action (which provides the parameters for what the state
	should do) as well as the target node on which the state will
	operate.

      </para>
      <para>
	
	If you are creating your own CCAction, you should also
	implement your own CCActionState and override at the <see cref="M:CocosSharp.CCActionState.Update" /> method.
	Additionally, you can override also the <see cref="M:CocosSharp.CCActionState.Stop" />, <see cref="M:CocosSharp.CCActionState.Step" /> methods and the 
	<see cref="P:CocosSharp.CCActionState.IsDone" /> property.

      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionState (CocosSharp.CCAction action, CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCAction action, class CocosSharp.CCNode target) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCAction" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="action">Action that is creating this state object.</param>
        <param name="target">The node to which the action will be applied..</param>
        <summary>Constructs a new CCActionState with the given action as its recipe, and the target as the node to alter.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAction Action { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCAction Action" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reference to the action that created this ActionState.</summary>
        <value>
        </value>
        <remarks>
	  The action referenced contains the configuration parameters
	  for this particular ActionState.  You can cast the resulting
	  Action to the type that would create it to get the
	  associated information.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="C#" Value="public virtual bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para kind="tool">Determines if this action has run to completion</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para kind="tool">True if this particular action has completed execution.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Layer">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCLayer Layer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCLayer Layer" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCLayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalTarget">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode OriginalTarget { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode OriginalTarget" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The target that was sent when this Action's State was originally created.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    Unlike the Target property, the value of this property will not be reset when the action stops executing.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCScene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene Scene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Step">
      <MemberSignature Language="C#" Value="protected virtual void Step (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Step(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">
          <para kind="tool">Delta time since the last invocation</para>
        </param>
        <summary>
          <para kind="tool">Called every frame with it's delta time.</para>
        </summary>
        <remarks>
          <para kind="tool">In general, you do not need to override this method, you are better off just overriding Update.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para kind="tool">Called when the action has completed.</para>
        </summary>
        <remarks>
          <para kind="tool">This will set the <see cref="P:CocosSharp.ActionState.Target" /> to null</para>
          <para kind="tool">Developers do not need to call this method directly, they should instead call <see cref="M:CocosSharp.CCNode.StopAction" /> instead</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode Target { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Target" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para kind="tool">The node on which the action state is operating</para>
        </summary>
        <value>
          <para kind="tool">This value is set when the action is created</para>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 time) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="time">
          <para kind="tool">A value between 0 and 1 representing the state of the action (0 is the start, 0.5 is the middle, 1 is the end).</para>
        </param>
        <summary>
          <para kind="tool">This method is invoked once per frame</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
