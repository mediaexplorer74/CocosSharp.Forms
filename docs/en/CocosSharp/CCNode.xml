<Type Name="CCNode" FullName="CocosSharp.CCNode">
  <TypeSignature Language="C#" Value="public class CCNode : CocosSharp.ICCFocusable, CocosSharp.ICCUpdatable, IComparable&lt;CocosSharp.CCNode&gt;, System.Collections.Generic.IComparer&lt;CocosSharp.CCNode&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCNode extends System.Object implements class CocosSharp.ICCFocusable, class CocosSharp.ICCUpdatable, class System.Collections.Generic.IComparer`1&lt;class CocosSharp.CCNode&gt;, class System.IComparable`1&lt;class CocosSharp.CCNode&gt;" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CocosSharp.ICCFocusable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>CocosSharp.ICCUpdatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;CocosSharp.CCNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;CocosSharp.CCNode&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
	The base class for all elements displayed.   
      </para>
    </summary>
    <remarks>
      <para>
	Anything that gets drawn or contains things that get drawn is a CCNode. The most common CCNodes are: <see cref="T:CocosSharp.CCScene" />, <see cref="T:CocosSharp.CCLayer" />, <see cref="T:CocosSharp.CCSprite" /> and <see cref="T:CocosSharp.CCMenu" />.
      </para>
      <para>The main features of a <see cref="T:CocosSharp.CCNode" /> are:
      <list type="bullet"><item><para>They can contain other Node nodes (AddChild, GetChildByTag, RemoveChild)</para></item><item><para>They can schedule periodic callbacks (Schedule, Unschedule, etc)</para></item><item><para>They can execute actions (RunAction, StopAction)</para></item></list></para>
      <para>
	Subclassing a CCNode involves initializing resources and scheduling any desired callbacks as well as overriding the draw method to render the node.
      </para>
      <para>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Default Constructor for CCNode.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode (CocosSharp.CCSize contentSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CocosSharp.CCSize contentSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="contentSize" Type="CocosSharp.CCSize" />
      </Parameters>
      <Docs>
        <param name="contentSize">A CCSize structure that specifies the ContentSize of the CCNode being created.</param>
        <summary>Constructor that creates a CCNode with the ContentSize initialized to contentSize</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAction">
      <MemberSignature Language="C#" Value="public void AddAction (CocosSharp.CCAction action, bool paused = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAction(class CocosSharp.CCAction action, bool paused) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCAction" />
        <Parameter Name="paused" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="action">Action to be added to this CCNode.</param>
        <param name="paused">Whether the action is paused or not at startup.</param>
        <summary>Adds the specified action to the node.</summary>
        <remarks>
          <para>
	    Adds the specific action to the node.
	  </para>
          <para>
	    When the target is paused, the queued actions won't be executed.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddActions">
      <MemberSignature Language="C#" Value="public void AddActions (bool paused, CocosSharp.CCFiniteTimeAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddActions(bool paused, class CocosSharp.CCFiniteTimeAction[] actions) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paused" Type="System.Boolean" />
        <Parameter Name="actions" Type="CocosSharp.CCFiniteTimeAction[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paused">Whether the action is paused or not at startup.</param>
        <param name="actions">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (CocosSharp.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class CocosSharp.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>
          <para>Adds a child to the container with z order and tag</para>
          <para>If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (CocosSharp.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class CocosSharp.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node</param>
        <param name="zOrder">The order which the child will be drawin in the Scene Graph</param>
        <summary>Adds a child to the container with the z order specified</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (CocosSharp.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class CocosSharp.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node</param>
        <param name="zOrder">The order which the child will be drawn in the Scene Graph</param>
        <param name="tag">User defined value given to the child so that it can be referenced later</param>
        <summary>Adds a child to the container with the z order specifed and a user defined value</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCustomEventListener">
      <MemberSignature Language="C#" Value="public CocosSharp.CCEventListenerCustom AddCustomEventListener (string eventName, Action&lt;CocosSharp.CCEventCustom&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCEventListenerCustom AddCustomEventListener(string eventName, class System.Action`1&lt;class CocosSharp.CCEventCustom&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCEventListenerCustom</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="callback" Type="System.Action&lt;CocosSharp.CCEventCustom&gt;" />
      </Parameters>
      <Docs>
        <param name="eventName">The custom event name to be added</param>
        <param name="callback">The action that is triggered.</param>
        <summary>Adds a custom event listener to this node that will trigger the Action passed.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddedToScene">
      <MemberSignature Language="C#" Value="protected virtual void AddedToScene ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddedToScene() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called when the CCNode is added to a Scene node.</summary>
        <remarks>When this method is called the node is initialized and the developer will have access to values such as VisibleBounds</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEventListener">
      <MemberSignature Language="C#" Value="public void AddEventListener (CocosSharp.CCEventListener listener, CocosSharp.CCNode node = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEventListener(class CocosSharp.CCEventListener listener, class CocosSharp.CCNode node) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="CocosSharp.CCEventListener" />
        <Parameter Name="node" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="listener">The listener of a specific event</param>
        <param name="node">The node that the listener should be added to.</param>
        <summary>When the Event Dispatcher starts generating events the listner that is specified is called on the node. </summary>
        <remarks>The priority and order of the event depends on the Scene Graph Global Z Order of the node</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEventListener">
      <MemberSignature Language="C#" Value="public void AddEventListener (CocosSharp.CCEventListener listener, int fixedPriority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEventListener(class CocosSharp.CCEventListener listener, int32 fixedPriority) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="CocosSharp.CCEventListener" />
        <Parameter Name="fixedPriority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">The listener of a specific event</param>
        <param name="fixedPriority">The fixed priority</param>
        <summary>When the Event Dispatcher starts generating events the listner that is specified is called on the node. </summary>
        <remarks>The priority and order of the event is set with the parameter fixedPriority.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalTransform">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAffineTransform AdditionalTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCAffineTransform AdditionalTransform" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the additional transform.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets the additional transform.</para>
          <para>
            <para>The additional transform will be concatenated at the end of NodeToParentTransform. It could be used to simulate parent-child relationship between two nodes (e.g. one is in BatchNode, another isn't). <programlisting><codeline><highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight><highlight class="stringliteral">"Icon-114.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight><highlight class="stringliteral">"Icon-72.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//position</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//scale</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setScale(2);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//rotation</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setRotation(20);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline></programlisting></para>
          </para>
          <para>The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate <computeroutput>parent-child</computeroutput> relationship between two nodes (e.g. one is in BatchNode, another isn't). <programlisting><codeline><highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight><highlight class="stringliteral">"Icon-114.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight><highlight class="stringliteral">"Icon-72.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//position</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//scale</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setScale(2);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//rotation</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setRotation(20);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline></programlisting></para>
          <computeroutput>parent-child</computeroutput>
          <programlisting>
            <codeline>
              <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
              <highlight class="stringliteral">"Icon-114.png"</highlight>
              <highlight class="normal">);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
              <highlight class="stringliteral">"Icon-72.png"</highlight>
              <highlight class="normal">);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//position</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//scale</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//rotation</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
              </highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal">
              </highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
            <highlight class="stringliteral">"Icon-114.png"</highlight>
            <highlight class="normal">);</highlight>
          </codeline>
          <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
          <sp />
          <sp />
          <ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>
          <highlight class="stringliteral">"Icon-114.png"</highlight>
          <highlight class="normal">);</highlight>
          <codeline>
            <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
          </codeline>
          <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
          <ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
          </codeline>
          <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
          <sp />
          <sp />
          <sp />
          <ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>
          <codeline>
            <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
            <highlight class="stringliteral">"Icon-72.png"</highlight>
            <highlight class="normal">);</highlight>
          </codeline>
          <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
          <sp />
          <sp />
          <sp />
          <ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>
          <highlight class="stringliteral">"Icon-72.png"</highlight>
          <highlight class="normal">);</highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
          </codeline>
          <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
          </codeline>
          <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
          <ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//position</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//position</highlight>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//scale</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//scale</highlight>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//rotation</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//rotation</highlight>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">
            </highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal">
            </highlight>
          </codeline>
          <highlight class="normal">
          </highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal">
          </highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineLocalTransform">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCAffineTransform AffineLocalTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCAffineTransform AffineLocalTransform" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineWorldTransform">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAffineTransform AffineWorldTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCAffineTransform AffineWorldTransform" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCPoint AnchorPoint" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchor point in percent.</summary>
        <value>Defaults to (0,0).</value>
        <remarks>
          <para>The anchor point of node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPointInPoints">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint AnchorPointInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCPoint AnchorPointInPoints" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchorPoint in absolute pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the anchorPoint in absolute pixels.</para>
          <para>
            <para>You can only read it. If you wish to modify it, use anchorPoint instead. </para>
            <para>
              <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
            </para>
            <para>The anchor point in absolute pixels. </para>
          </para>
          <para>You can only read it. If you wish to modify it, use anchorPoint instead. </para>
          <para>
            <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
          </para>
          <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
          <para>The anchor point in absolute pixels. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCApplication Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCApplication Application" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCApplication</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect BoundingBox" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.</para>
          <para>
            <para>This method returns a temporaty variable, so it can't returns const Rect&amp; </para>
          </para>
          <para>This method returns a temporaty variable, so it can't returns const Rect&amp; </para>
          <para>
            <para>A "local" axis aligned boudning box of the node. </para>
          </para>
          <para>A "local" axis aligned boudning box of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBoxTransformedToParent">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect BoundingBoxTransformedToParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect BoundingBoxTransformedToParent" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBoxTransformedToWorld">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect BoundingBoxTransformedToWorld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect BoundingBoxTransformedToWorld" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCCamera Camera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCCamera Camera" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a camera object that lets you move the node using a gluLookAt</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a camera object that lets you move the node using a gluLookAt</para>
          <para>
            <programlisting>
              <codeline>
                <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
              </codeline>
              <codeline>
                <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
              </codeline>
              <codeline>
                <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
              </codeline>
            </programlisting>
          </para>
          <programlisting>
            <codeline>
              <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
          </codeline>
          <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
          </codeline>
          <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
          </codeline>
          <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
          <sp />
          <sp />
          <para>
            <para>A <see cref="T:CocosSharp.CCCamera" /> object that lets you move the node using a gluLookAt </para>
          </para>
          <para>A <see cref="T:CocosSharp.CCCamera" /> object that lets you move the node using a gluLookAt </para>
          <see cref="T:CocosSharp.CCCamera" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReceiveFocus">
      <MemberSignature Language="C#" Value="public virtual bool CanReceiveFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReceiveFocus" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRawList&lt;CocosSharp.CCNode&gt; Children { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCRawList`1&lt;class CocosSharp.CCNode&gt; Children" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRawList&lt;CocosSharp.CCNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an array of children</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return an array of children</para>
          <para>Composing a "tree" structure is a very important feature of <see cref="T:CocosSharp.CCNode" /> Here's a sample code of traversing children array: <programlisting><codeline><highlight class="normal"><ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight></codeline><codeline><highlight class="normal"><ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight></codeline><codeline><highlight class="normal">{</highlight></codeline><codeline><highlight class="normal"><sp /><sp /><sp /><sp />node-&gt;setPosition(0,0);</highlight></codeline><codeline><highlight class="normal">}</highlight></codeline></programlisting> This sample code traverses all children nodes, and set theie position to (0,0)</para>
          <see cref="T:CocosSharp.CCNode" />
          <programlisting>
            <codeline>
              <highlight class="normal">
                <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
                <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">{</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
                <sp />
                <sp />
                <sp />
                <sp />node-&gt;setPosition(0,0);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">}</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="normal">
              <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
          </codeline>
          <highlight class="normal">
            <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
          <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">
              <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
          </codeline>
          <highlight class="normal">
            <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
          <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>
          <sp />
          <codeline>
            <highlight class="normal">{</highlight>
          </codeline>
          <highlight class="normal">{</highlight>
          <codeline>
            <highlight class="normal">
              <sp />
              <sp />
              <sp />
              <sp />node-&gt;setPosition(0,0);</highlight>
          </codeline>
          <highlight class="normal">
            <sp />
            <sp />
            <sp />
            <sp />node-&gt;setPosition(0,0);</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">}</highlight>
          </codeline>
          <highlight class="normal">}</highlight>
          <para>
            <para>An array of children </para>
          </para>
          <para>An array of children </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildrenCount">
      <MemberSignature Language="C#" Value="public int ChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChildrenCount" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the amount of children.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Get the amount of children.</para>
          <para>
            <para>The amount of children. </para>
          </para>
          <para>The amount of children. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cleanup">
      <MemberSignature Language="C#" Value="public virtual void Cleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cleanup() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops all running actions and schedulers </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCColor3B Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCColor3B Color" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCColor3B</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (CocosSharp.CCNode that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class CocosSharp.CCNode that) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="that">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCSize ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize ContentSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the untransformed size of the node.</summary>
        <value>Default value is (0, 0).</value>
        <remarks>
          <para>Returns the untransformed size of the node.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
            </para>
            <para>The untransformed size of the node. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
          </para>
          <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
          <para>The untransformed size of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCPoint ConvertToWorldspace (CocosSharp.CCPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CocosSharp.CCPoint ConvertToWorldspace(valuetype CocosSharp.CCPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect ConvertToWorldspace (CocosSharp.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CocosSharp.CCRect ConvertToWorldspace(valuetype CocosSharp.CCRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CocosSharp.CCRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual void Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Director">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCDirector Director { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCDirector Director" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCDirector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCascadeColor">
      <MemberSignature Language="C#" Value="protected void DisableCascadeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void DisableCascadeColor() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCascadeOpacity">
      <MemberSignature Language="C#" Value="protected virtual void DisableCascadeOpacity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DisableCascadeOpacity() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEvent">
      <MemberSignature Language="C#" Value="public void DispatchEvent (CocosSharp.CCEvent eventToDispatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchEvent(class CocosSharp.CCEvent eventToDispatch) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventToDispatch" Type="CocosSharp.CCEvent" />
      </Parameters>
      <Docs>
        <param name="eventToDispatch">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEvent">
      <MemberSignature Language="C#" Value="public void DispatchEvent (string customEvent, object userData = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchEvent(string customEvent, object userData) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customEvent" Type="System.String" />
        <Parameter Name="userData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="customEvent">To be added.</param>
        <param name="userData">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayedColor">
      <MemberSignature Language="C#" Value="public CocosSharp.CCColor3B DisplayedColor { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCColor3B DisplayedColor" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCColor3B</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayedOpacity">
      <MemberSignature Language="C#" Value="public byte DisplayedOpacity { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 DisplayedOpacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="protected virtual void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node.</summary>
        <remarks>When extending a CCNode this is usually one of the methods that is overridden if user wants to represent something to the user.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAction">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAction GetAction (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCAction GetAction(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionState">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState GetActionState (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState GetActionState(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildByTag">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode GetChildByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCNode GetChildByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">An identifier to find the child node.</param>
        <summary>Gets a child from the container with its tag</summary>
        <returns>The node that is identified by the value passed or null</returns>
        <remarks>
          <para>Gets a child from the container with its tag</para>
          <para>
            <para>a <see cref="T:CocosSharp.CCNode" /> object whose tag equals to the input parameter </para>
          </para>
          <para>a <see cref="T:CocosSharp.CCNode" /> object whose tag equals to the input parameter </para>
          <see cref="T:CocosSharp.CCNode" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalZOrder">
      <MemberSignature Language="C#" Value="public float GlobalZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 GlobalZOrder" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Grid">
      <MemberSignature Language="C#" Value="public CocosSharp.CCGridBase Grid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCGridBase Grid" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCGridBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes a grid object that is used when applying effects</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes a grid object that is used when applying effects</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreAnchorPointForPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreAnchorPointForPosition" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the anchor point will be (0,0) when you position this node.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the anchor point will be (0,0) when you position this node.</para>
          <para>This is an internal method, only used by <see cref="T:CocosSharp.CCLayer" /> and <see cref="T:CocosSharp.CCScene" />. Don't call it outside framework. The default value is false, while in <see cref="T:CocosSharp.CCLayer" /> and <see cref="T:CocosSharp.CCScene" /> are true</para>
          <see cref="T:CocosSharp.CCLayer" />
          <see cref="T:CocosSharp.CCScene" />
          <see cref="T:CocosSharp.CCLayer" />
          <see cref="T:CocosSharp.CCScene" />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsColorCascaded">
      <MemberSignature Language="C#" Value="public virtual bool IsColorCascaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsColorCascaded" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsColorModifiedByOpacity">
      <MemberSignature Language="C#" Value="public virtual bool IsColorModifiedByOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsColorModifiedByOpacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpacityCascaded">
      <MemberSignature Language="C#" Value="public virtual bool IsOpacityCascaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpacityCascaded" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReorderChildDirty">
      <MemberSignature Language="C#" Value="protected bool IsReorderChildDirty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReorderChildDirty" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the node accepts event callbacks.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns whether or not the node accepts event callbacks.</para>
          <para>Running means the node accept event callbacks like <ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member">onEnter()</ref>, <ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member">onExit()</ref>, update()</para>
          <ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member">onEnter()</ref>
          <ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member">onExit()</ref>
          <para>
            <para>Whether or not the node is running. </para>
          </para>
          <para>Whether or not the node is running. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode this[int tag] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Item(int32)" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyBackClicked">
      <MemberSignature Language="C#" Value="public virtual void KeyBackClicked ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void KeyBackClicked() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyMenuClicked">
      <MemberSignature Language="C#" Value="public virtual void KeyMenuClicked ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void KeyMenuClicked() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Layer">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCLayer Layer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCLayer Layer" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCLayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalZOrder">
      <MemberSignature Language="C#" Value="public int LocalZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalZOrder" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfRunningActions">
      <MemberSignature Language="C#" Value="public int NumberOfRunningActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfRunningActions" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="public virtual void OnEnter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnter() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time when  enters the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a "sister/brother" node. If you override onEnter, you shall call its parent's one, e.g., Node::onEnter(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnEnterTransitionDidFinish">
      <MemberSignature Language="C#" Value="public virtual void OnEnterTransitionDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterTransitionDidFinish() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked when the  enters in the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call its parent's one, e.g. Node::onEnterTransitionDidFinish()</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="public virtual void OnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExit() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call its parent's one, e.g., Node::onExit(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExitTransitionDidStart">
      <MemberSignature Language="C#" Value="public virtual void OnExitTransitionDidStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExitTransitionDidStart() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is called every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this callback is called when the transition starts. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public virtual byte Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Opacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderOfArrival">
      <MemberSignature Language="C#" Value="protected uint OrderOfArrival { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 OrderOfArrival" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the arrival order, indecates which children is added previously.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the arrival order, indecates which children is added previously.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
            </para>
            <para>The arrival order. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
          </para>
          <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
          <para>The arrival order. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Parent" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a pointer to the parent node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a pointer to the parent node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
            </para>
            <para>A pointer to the parnet node </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
          </para>
          <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
          <para>A pointer to the parnet node </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentUpdatedTransform">
      <MemberSignature Language="C#" Value="protected virtual void ParentUpdatedTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ParentUpdatedTransform() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method invoked when local transformation has changed.</summary>
        <remarks>
          <para>
	    This is called when the transformation of the node has changed (for example Position, Scale and Skew).
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseListeners">
      <MemberSignature Language="C#" Value="public void PauseListeners (bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PauseListeners(bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseListeners">
      <MemberSignature Language="C#" Value="public void PauseListeners (CocosSharp.CCNode target, bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PauseListeners(class CocosSharp.CCNode target, bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCPoint Position" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>Defaults to (0, 0).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionWorldspace">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCPoint PositionWorldspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCPoint PositionWorldspace" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionX">
      <MemberSignature Language="C#" Value="public float PositionX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets x or y coordinate individually for position. These methods are used in Lua and Javascript Bindings </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionY">
      <MemberSignature Language="C#" Value="public float PositionY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RealColor">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCColor3B RealColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCColor3B RealColor" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCColor3B</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RealOpacity">
      <MemberSignature Language="C#" Value="protected byte RealOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 RealOpacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildren (bool cleanup = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildren(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenByTag">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildrenByTag (int tag, bool cleanup = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildrenByTag(int32 tag, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllListeners">
      <MemberSignature Language="C#" Value="public void RemoveAllListeners ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllListeners() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual void RemoveChild (CocosSharp.CCNode child, bool cleanup = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class CocosSharp.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildByTag">
      <MemberSignature Language="C#" Value="public void RemoveChildByTag (int tag, bool cleanup = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildByTag(int32 tag, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventListener">
      <MemberSignature Language="C#" Value="public void RemoveEventListener (CocosSharp.CCEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventListener(class CocosSharp.CCEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="CocosSharp.CCEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventListeners">
      <MemberSignature Language="C#" Value="public void RemoveEventListeners (CocosSharp.CCEventListenerType listenerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventListeners(valuetype CocosSharp.CCEventListenerType listenerType) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listenerType" Type="CocosSharp.CCEventListenerType" />
      </Parameters>
      <Docs>
        <param name="listenerType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventListeners">
      <MemberSignature Language="C#" Value="public void RemoveEventListeners (bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventListeners(bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventListeners">
      <MemberSignature Language="C#" Value="public void RemoveEventListeners (CocosSharp.CCNode target, bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventListeners(class CocosSharp.CCNode target, bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParent">
      <MemberSignature Language="C#" Value="public void RemoveFromParent (bool cleanup = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromParent(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public virtual void ReorderChild (CocosSharp.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderChild(class CocosSharp.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>
          <para>Reorders a child according to a new z value.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Repeat">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState Repeat (uint times, CocosSharp.CCFiniteTimeAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState Repeat(unsigned int32 times, class CocosSharp.CCFiniteTimeAction action) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="times" Type="System.UInt32" />
        <Parameter Name="action" Type="CocosSharp.CCFiniteTimeAction" />
      </Parameters>
      <Docs>
        <param name="times">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Repeat">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState Repeat (uint times, CocosSharp.CCFiniteTimeAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState Repeat(unsigned int32 times, class CocosSharp.CCFiniteTimeAction[] actions) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="times" Type="System.UInt32" />
        <Parameter Name="actions" Type="CocosSharp.CCFiniteTimeAction[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="times">To be added.</param>
        <param name="actions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatForever">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState RepeatForever (CocosSharp.CCFiniteTimeAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState RepeatForever(class CocosSharp.CCFiniteTimeAction action) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCFiniteTimeAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatForever">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState RepeatForever (CocosSharp.CCFiniteTimeAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState RepeatForever(class CocosSharp.CCFiniteTimeAction[] actions) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="CocosSharp.CCFiniteTimeAction[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetCleanState">
      <MemberSignature Language="C#" Value="protected virtual void ResetCleanState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResetCleanState() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeListeners">
      <MemberSignature Language="C#" Value="public void ResumeListeners (bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeListeners(bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeListeners">
      <MemberSignature Language="C#" Value="public void ResumeListeners (CocosSharp.CCNode target, bool recursive = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeListeners(class CocosSharp.CCNode target, bool recursive) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual float Rotation { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rotation of the node in degrees.</summary>
        <value>Defaults to zero.</value>
        <remarks>
          <para>Returns the rotation of the node in degrees.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public virtual float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
            </para>
            <para>The X rotation in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
          <para>The X rotation in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public virtual float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
            </para>
            <para>The Y rotation in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
          <para>The Y rotation in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAction">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState RunAction (CocosSharp.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState RunAction(class CocosSharp.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunActions">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState RunActions (CocosSharp.CCFiniteTimeAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState RunActions(class CocosSharp.CCFiniteTimeAction[] actions) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="CocosSharp.CCFiniteTimeAction[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual float Scale { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the scale factor of the node, when X and Y have the same scale factor.</summary>
        <value>Defaults to (1, 1).</value>
        <remarks>
          <para>Gets the scale factor of the node, when X and Y have the same scale factor.</para>
          <para>
            <para>Assert when _scaleX != _scaleY. </para>
            <para>
              <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
            </para>
            <para>The scale factor of the node. </para>
          </para>
          <para>Assert when _scaleX != _scaleY. </para>
          <para>
            <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
          </para>
          <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
          <para>The scale factor of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaledContentSize">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCSize ScaledContentSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize ScaledContentSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public virtual float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on X axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the scale factor on X axis of this node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
            </para>
            <para>The scale factor on X axis. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
          <para>The scale factor on X axis. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public virtual float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on Y axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the scale factor on Y axis of this node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
            </para>
            <para>The scale factor on Y axis. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
          <para>The scale factor on Y axis. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCScene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene Scene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Schedules a custom selector, the scheduled selector will be ticked every frame schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (int priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(int32 priority) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="priority">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval, uint repeat, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval, unsigned int32 repeat, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
        <Parameter Name="repeat" Type="System.UInt32" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <param name="repeat">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleOnce">
      <MemberSignature Language="C#" Value="public void ScheduleOnce (Action&lt;float&gt; selector, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleOnce(class System.Action`1&lt;float32&gt; selector, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <param name="delay">The amount of time that the first tick will wait before execution. </param>
        <summary>Schedules a selector that runs only once, with a delay of 0 or larger schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ScreenToWorldspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCPoint ScreenToWorldspace (CocosSharp.CCPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CocosSharp.CCPoint ScreenToWorldspace(valuetype CocosSharp.CCPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual void Serialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Serialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetListenerPriority">
      <MemberSignature Language="C#" Value="public void SetListenerPriority (CocosSharp.CCEventListener listener, int fixedPriority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetListenerPriority(class CocosSharp.CCEventListener listener, int32 fixedPriority) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="CocosSharp.CCEventListener" />
        <Parameter Name="fixedPriority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="fixedPriority">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public virtual float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the X skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the X skew angle of the node in degrees.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
            </para>
            <para>The X skew angle of the node in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
          <para>The X skew angle of the node in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public virtual float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Y skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the Y skew angle of the node in degrees.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
            </para>
            <para>The Y skew angle of the node in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
          <para>The Y skew angle of the node in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortAllChildren">
      <MemberSignature Language="C#" Value="public virtual void SortAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SortAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. Don't call this manually unless a child added needs to be removed in the same frame </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public void StopAction (CocosSharp.CCActionState actionState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAction(class CocosSharp.CCActionState actionState) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionState" Type="CocosSharp.CCActionState" />
      </Parameters>
      <Docs>
        <param name="actionState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public void StopAction (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAction(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAllActions">
      <MemberSignature Language="C#" Value="public void StopAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAllActions() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops and removes all actions from the running action list . </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IComparer&lt;CocosSharp.CCNode&gt;.Compare">
      <MemberSignature Language="C#" Value="int IComparer&lt;CCNode&gt;.Compare (CocosSharp.CCNode n1, CocosSharp.CCNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IComparer&lt;CocosSharp.CCNode&gt;.Compare(class CocosSharp.CCNode n1, class CocosSharp.CCNode n2) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="CocosSharp.CCNode" />
        <Parameter Name="n2" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="n1">To be added.</param>
        <param name="n2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the tag that is used to identify the node easily.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the tag that is used to identify the node easily.</para>
          <para>Please refer to getTag for the sample code.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagInvalid">
      <MemberSignature Language="C#" Value="public const int TagInvalid = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 TagInvalid = (-1)" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransformAncestors">
      <MemberSignature Language="C#" Value="public void TransformAncestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformAncestors() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation of it's ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) It's necessary to transform the ancestors again. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public void Unschedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unschedule() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public void Unschedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unschedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Unschedules a custom selector. schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnscheduleAll">
      <MemberSignature Language="C#" Value="public void UnscheduleAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleAll() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unschedule all scheduled method functions: custom functions, and the Update action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">Delta time</param>
        <summary>Override this method to control the updating of the node if it depends on a time difference element.</summary>
        <remarks>When extending a CCNode this is usually one of the methods that is overridden if user wants to represent something to the user that depends on a time element.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCascadeColor">
      <MemberSignature Language="C#" Value="protected void UpdateCascadeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateCascadeColor() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Propogates the color to the child nodes of this node.</summary>
        <remarks>Override this method to control how the propogation is performed</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCascadeOpacity">
      <MemberSignature Language="C#" Value="protected virtual void UpdateCascadeOpacity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UpdateCascadeOpacity() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Propogates the opacity to the child nodes of this node.</summary>
        <remarks>Override this method to control how the propogation is performed</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateColor">
      <MemberSignature Language="C#" Value="public virtual void UpdateColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateColor() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Update the color property of this node</summary>
        <remarks>Override this property to control how the color value is set.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayedColor">
      <MemberSignature Language="C#" Value="public virtual void UpdateDisplayedColor (CocosSharp.CCColor3B parentColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateDisplayedColor(valuetype CocosSharp.CCColor3B parentColor) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentColor" Type="CocosSharp.CCColor3B" />
      </Parameters>
      <Docs>
        <param name="parentColor">Color of parent</param>
        <summary>Propagates the children nodes with the Color of their parent</summary>
        <remarks>Override this method to control how the color value is propogated to the children of this node.
        <see cref="T:CocosSharp.CCSprite" />
        <see cref="T:CocosSharp.CCLayer" />
        <see cref="T:CocosSharp.CCLayerColor" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayedOpacity">
      <MemberSignature Language="C#" Value="protected virtual void UpdateDisplayedOpacity (byte parentOpacity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UpdateDisplayedOpacity(unsigned int8 parentOpacity) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentOpacity" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="parentOpacity">Opacity of parent</param>
        <summary>Propogates the children nodes with Opacity of their parent</summary>
        <remarks>Override this method to control how the opacity value is propogated to the children of this node.
        <see cref="T:CocosSharp.CCSprite" />
        <see cref="T:CocosSharp.CCLayer" />
        <see cref="T:CocosSharp.CCLayerColor" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTransform">
      <MemberSignature Language="C#" Value="protected virtual void UpdateTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UpdateTransform() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls children's UpdateTransform() method recursively.</summary>
        <remarks>
          <para>Calls children's <ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member">updateTransform()</ref> method recursively.</para>
          <ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member">updateTransform()</ref>
          <para>This method is moved from <see cref="T:CocosSharp.CCSprite" />, so it's no longer specific to <see cref="T:CocosSharp.CCSprite" />. As the result, you apply <see cref="T:CocosSharp.CCSpriteBatchNode" />'s optimization on your customed <see cref="T:CocosSharp.CCNode" />. e.g., batchNode-&gt;addChild(myCustomNode), while you can only addChild(sprite) before. </para>
          <see cref="T:CocosSharp.CCSprite" />
          <see cref="T:CocosSharp.CCSprite" />
          <see cref="T:CocosSharp.CCSpriteBatchNode" />
          <see cref="T:CocosSharp.CCNode" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserData">
      <MemberSignature Language="C#" Value="public object UserData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserData" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets a custom user defined data.</summary>
        <value>User defined information</value>
        <remarks>
          <para>Sets a custom user data pointer</para>
          <para>You can set anything in UserData, a data block, a structure or an object, etc. </para>
          <para>Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.</para>
          <para>UserData will be set to null in <see cref="T:CocosSharp.CCNode" />'s destructure.</para>
          <see cref="T:CocosSharp.CCNode" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserObject">
      <MemberSignature Language="C#" Value="public object UserObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserObject" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a user assigned Object</summary>
        <value>User defined object</value>
        <remarks>
          <para>Returns a user assigned Object</para>
          <para>Similar to UserData, but holds an objectThe UserObject will be set to null in <see cref="T:CocosSharp.CCNode" />'s destructure.</para>
          <see cref="T:CocosSharp.CCNode" />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexZ">
      <MemberSignature Language="C#" Value="public virtual float VertexZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VertexZ" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets Z vertex of this node.</summary>
        <value>Float value of the Z vertex</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Viewport">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCViewport Viewport { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCViewport Viewport" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCViewport</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Viewport of the Scene</summary>
        <value>A viewport that is specified on the Scene</value>
        <remarks>This is automatically created by the scene if a custom viewport is not passed to the scene constructor.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewportChanged">
      <MemberSignature Language="C#" Value="protected virtual void ViewportChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ViewportChanged() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method when developer wants to be notified when the Scenes viewport values change.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the node is visible</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the node is visible</para>
          <para>The default value is true, a node is default to visible</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleBoundsChanged">
      <MemberSignature Language="C#" Value="protected virtual void VisibleBoundsChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void VisibleBoundsChanged() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method when you want to be notified when the Visible Bounds of the node changes.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleBoundsWorldspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect VisibleBoundsWorldspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect VisibleBoundsWorldspace" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A CCRect that contains the visible bounds in world space that the Scenes viewport is set to.</summary>
        <value>CCRect with Origin and Size set to the visible bounds</value>
        <remarks>This is can be accessed after the node is added to a Scene.  Override AddedToScene method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCWindow Window { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCWindow Window" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the windows that this node is associated to</summary>
        <value>Created Window</value>
        <remarks>The window is set during scene creationg.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorldToParentspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCPoint WorldToParentspace (CocosSharp.CCPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CocosSharp.CCPoint WorldToParentspace(valuetype CocosSharp.CCPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CocosSharp.CCPoint" />
      </Parameters>
      <Docs>
        <param name="point">Point to be transformed.</param>
        <summary>This will transform the x,y values to the Parent space.</summary>
        <returns>A CCPoint with transformed x,y values</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="XnaWorldMatrix">
      <MemberSignature Language="C#" Value="protected Microsoft.Xna.Framework.Matrix XnaWorldMatrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Xna.Framework.Matrix XnaWorldMatrix" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Microsoft.Xna.Framework.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public int ZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZOrder" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets the Z order of this node.</summary>
        <value>An integer value</value>
        <remarks>
          <para>Gets/Sets the Z order of this node.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
            </para>
            <para>The Z order. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
          </para>
          <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
          <para>The Z order. </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
