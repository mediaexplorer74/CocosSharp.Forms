<Type Name="CCScene" FullName="CocosSharp.CCScene">
  <TypeSignature Language="C#" Value="public class CCScene : CocosSharp.CCNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCScene extends CocosSharp.CCNode" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Toplevel node that is used to host CCNodes that share a common <see cref="T:CocosSharp.CCWindow" /> and a common <see cref="T:CocosSharp.CCViewport" />.</summary>
    <remarks>
      <para>

	A subclass of <see cref="T:CocosSharp.CCNode" /> that renders
	all children in a common window and viewport.  In particular,
	any node object that wishes to be rendered needs be associated
	with a parent CCScene (as well as a <see cref="T:CocosSharp.CCLayer" />).
      </para>
      <para>
	A CCScene object has links to the <see cref="T:CocosSharp.CCWindow" /> and <see cref="T:CocosSharp.CCViewport" />. During a draw call to a
	scene, the viewport is given to the underlying render target.
      </para>
      <example>
        <code lang="c#">
public class AppDelegate : CCApplicationDelegate
{
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
        mainWindow.SetDesignResolutionSize(960, 640, CCSceneResolutionPolicy.ShowAll);

        var topLeftViewport = new CCViewport(new CCRect(0.0f, 0.0f, 0.5f, 0.5f));
        var topRightViewport = new CCViewport(new CCRect(0.5f, 0.0f, 0.5f, 0.5f));

        var sceneDirector1 = new CCDirector();
        var sceneDirector2 = new CCDirector();

        var scene1 = new CCScene(mainWindow, topLeftViewport, sceneDirector1) {
            SceneResolutionPolicy = CCSceneResolutionPolicy.Custom
	};

        CCScene scene2 = new CCScene(mainWindow, topRightViewport, sceneDirector2) {
            SceneResolutionPolicy = CCSceneResolutionPolicy.Custom 
        };

        var layer1 = new MyLayer();
        var layer2 = new MyLayer2();

        scene1.AddChild(layer1);
        scene2.AddChild(layer2);

        sceneDirector1.RunWithScene(scene1);
        sceneDirector2.RunWithScene(scene2);
    }
}
</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCScene (CocosSharp.CCScene scene);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCScene scene) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="scene" Type="CocosSharp.CCScene" />
      </Parameters>
      <Docs>
        <param name="scene">Reference scene.</param>
        <summary>Creates a scence by replicating the provided scene's Window, Viewport and Director.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCScene (CocosSharp.CCWindow window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCWindow window) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="window" Type="CocosSharp.CCWindow" />
      </Parameters>
      <Docs>
        <param name="window">Window associated with the new scene.</param>
        <summary>Creates a scene and sets the window associated with it.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCScene (CocosSharp.CCWindow window, CocosSharp.CCDirector director);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCWindow window, class CocosSharp.CCDirector director) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="window" Type="CocosSharp.CCWindow" />
        <Parameter Name="director" Type="CocosSharp.CCDirector" />
      </Parameters>
      <Docs>
        <param name="window">Window associated with the new scene.</param>
        <param name="director">Director associated with the new scene.</param>
        <summary>Creates a scene and sets the window and director associated with it.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCScene (CocosSharp.CCWindow window, CocosSharp.CCViewport viewport, CocosSharp.CCDirector director = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCWindow window, class CocosSharp.CCViewport viewport, class CocosSharp.CCDirector director) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="window" Type="CocosSharp.CCWindow" />
        <Parameter Name="viewport" Type="CocosSharp.CCViewport" />
        <Parameter Name="director" Type="CocosSharp.CCDirector" />
      </Parameters>
      <Docs>
        <param name="window">Window associated with the new scene.</param>
        <param name="viewport">Viewport associated with the new scene.</param>
        <param name="director">Director associated with the new scene.</param>
        <summary>Creates a scene and sets the window, viewport and director associated with it.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineLocalTransform">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCAffineTransform AffineLocalTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCAffineTransform AffineLocalTransform" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCCamera Camera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCCamera Camera" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property always returns null for CCScene, and setting the value is ignored.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCSize ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize ContentSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Director">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCDirector Director { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCDirector Director" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCDirector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The director associated with this scene.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTransition">
      <MemberSignature Language="C#" Value="public virtual bool IsTransition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTransition" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCScene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene Scene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns this instance.</summary>
        <value>
        </value>
        <remarks>This is an overwritten method from CCNode that just returns this instance.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SceneResolutionPolicy">
      <MemberSignature Language="C#" Value="public CocosSharp.CCSceneResolutionPolicy SceneResolutionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSceneResolutionPolicy SceneResolutionPolicy" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSceneResolutionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Viewport">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCViewport Viewport { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCViewport Viewport" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCViewport</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The viewport associated with this scene.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleBoundsScreenspace">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect VisibleBoundsScreenspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect VisibleBoundsScreenspace" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCWindow Window { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCWindow Window" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The window associated with this scene.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
