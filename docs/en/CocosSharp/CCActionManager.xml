<Type Name="CCActionManager" FullName="CocosSharp.CCActionManager">
  <TypeSignature Language="C#" Value="public class CCActionManager : CocosSharp.ICCUpdatable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCActionManager extends System.Object implements class CocosSharp.ICCUpdatable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CocosSharp.ICCUpdatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para> manages all the actions. Normally you won't need to use this class directly. 99% of the cases you will use the interface, which in-turn will subsequently call the action manager. However, instances where you would use this class directly include: </para>
    </summary>
    <remarks>
      <para>
        <list type="bullet" />
      </para>
      <list type="bullet" />
      <para>
        <para>v0.8 </para>
      </para>
      <para>v0.8 </para>
      <item>
        <description>When you want to run an action where the target is different from a Node.</description>
      </item>
      <description>When you want to run an action where the target is different from a Node.</description>
      <item>
        <description>When you want to pause / resume the actions</description>
      </item>
      <description>When you want to pause / resume the actions</description>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAction">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState AddAction (CocosSharp.CCAction action, CocosSharp.CCNode target, bool paused = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState AddAction(class CocosSharp.CCAction action, class CocosSharp.CCNode target, bool paused) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCAction" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
        <Parameter Name="paused" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="target">To be added.</param>
        <param name="paused">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CCActionManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAction">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAction GetAction (int tag, CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCAction GetAction(int32 tag, class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionState">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionState GetActionState (int tag, CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CocosSharp.CCActionState GetActionState(int32 tag, class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfRunningActionsInTarget">
      <MemberSignature Language="C#" Value="public int NumberOfRunningActionsInTarget (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NumberOfRunningActionsInTarget(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Returns the numbers of actions that are running in a certain target. Composable actions are counted as 1 action. Example:</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the numbers of actions that are running in a certain target. Composable actions are counted as 1 action. Example:<list type="bullet" /></para>
          <list type="bullet" />
          <item>
            <description>If you are running 1 Sequence of 7 actions, it will return 1.</description>
          </item>
          <description>If you are running 1 Sequence of 7 actions, it will return 1.</description>
          <item>
            <description>If you are running 7 Sequences of 2 actions, it will return 7. </description>
          </item>
          <description>If you are running 7 Sequences of 2 actions, it will return 7. </description>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAllRunningActions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;object&gt; PauseAllRunningActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;object&gt; PauseAllRunningActions() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses all running actions, returning a list of targets whose actions were paused. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PauseTarget">
      <MemberSignature Language="C#" Value="public void PauseTarget (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PauseTarget(object target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Pauses the target: all running actions and newly added actions will be paused. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveAction">
      <MemberSignature Language="C#" Value="public void RemoveAction (CocosSharp.CCActionState actionState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAction(class CocosSharp.CCActionState actionState) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionState" Type="CocosSharp.CCActionState" />
      </Parameters>
      <Docs>
        <param name="actionState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAction">
      <MemberSignature Language="C#" Value="public void RemoveAction (int tag, CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAction(int32 tag, class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllActions">
      <MemberSignature Language="C#" Value="public void RemoveAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllActions() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all actions from all the targets. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllActionsFromTarget">
      <MemberSignature Language="C#" Value="public void RemoveAllActionsFromTarget (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllActionsFromTarget(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Removes all actions from a certain target. All the actions that belongs to the target will be removed. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ResumeTarget">
      <MemberSignature Language="C#" Value="public void ResumeTarget (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeTarget(object target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Resumes the target. All queued actions will be resumed. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ResumeTargets">
      <MemberSignature Language="C#" Value="public void ResumeTargets (System.Collections.Generic.List&lt;object&gt; targetsToResume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeTargets(class System.Collections.Generic.List`1&lt;object&gt; targetsToResume) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetsToResume" Type="System.Collections.Generic.List&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="targetsToResume">To be added.</param>
        <summary>Resume a set of targets (convenience function to reverse a pauseAllRunningActions call) </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
