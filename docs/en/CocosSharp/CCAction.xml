<Type Name="CCAction" FullName="CocosSharp.CCAction">
  <TypeSignature Language="C#" Value="public abstract class CCAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CCAction extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>The base abstract class for Action objects.</summary>
    <remarks>
      <para>
Actions are orders that can be run on a target <see cref="T:CocosSharp.CCNode" /> object, 			altering the attributes of a node (e.g. position, rotation, scale, color, opacity, etc.).
Actions that derive from <see cref="T:CocosSharp.CCActionInterval" /> alter the properties of
a node over a period of time, while actions that derive from <see cref="T:CocosSharp.CCActionInstant" /> apply the changes immediately.
</para>
      <para>
To start an action, call <see cref="M:CocosSharp.CCNode.RunAction(CocosSharp.CCAction)" /> method on a target node. Note, that <see langword="CCAction" /> objects are stateless, allowing for the same action instance to be run on different targets.
</para>
      <example>
        <code lang="C#">
var action = new CCMoveBy(0.5f, new CCPoint(100, 0));

// Multiple node objects can run the same action
node1.RunAction(action);
node2.RunAction(action);
</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CCAction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected virtual CocosSharp.CCActionState StartAction (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class CocosSharp.CCActionState StartAction(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">The target node whose attributes will be modified by the running action.</param>
        <summary>Performs an action on the specified target node.</summary>
        <returns>An <see cref="T:CocosSharp.CCActionState" /> object that represent a running instance of the action. </returns>
        <remarks>A user can alternatively call <see cref="M:CocosSharp.CCNode.RunAction(CocosSharp.CCAction)" /> on the target node to start the action. Note, that each time <see langword="StartAction" /> is called a new <see cref="T:CocosSharp.CCActionState" /> is created.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An identifier for the <see langword="CCAction" /> object.</summary>
        <value>The tag value.</value>
        <remarks>Allows a target <see cref="T:CocosSharp.CCNode" /> object to fetch <see cref="M:CocosSharp.CCNode.GetAction(System.Int32)" />, stop <see cref="M:CocosSharp.CCNode.StopAction(System.Int32)" /> or remove <see cref="M:CocosSharp.CCNode.RemoveChildByTag(System.Int32,System.Boolean)" /> a running action by passing in the tag identifier. Note, however that tag values do not have to be unique across different actions, and thus such methods will only apply to the first action instance found to have the corresponding tag. For the particular case of removing multiple actions with the same tag, use <see cref="M:CocosSharp.CCNode.RemoveAllChildrenByTag(System.Int32,System.Boolean)" />.  </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
