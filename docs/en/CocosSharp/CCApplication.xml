<Type Name="CCApplication" FullName="CocosSharp.CCApplication">
  <TypeSignature Language="C#" Value="public class CCApplication : Microsoft.Xna.Framework.DrawableGameComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCApplication extends Microsoft.Xna.Framework.DrawableGameComponent" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Xna.Framework.DrawableGameComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Initializes game and handles input events.</summary>
    <remarks>
      <para>
	Manages the running state, scheduling, event handling and rendering of a game.
      </para>
      <para>

	A CCApplication maintains a list of <see cref="T:CocosSharp.CCWindow" /> objects (due to current MonoGame
	limitations, currently only supports a single window).  During
	each iteration of the game run-loop, the application invokes the
	<see cref="M:CocosSharp.CCApplication.Update" /> method where it processes input-events, passing the
	relevant events to the corresponding windows. 
      </para>
      <para>
	Additionally, in-game time-dependent events, such as running
	actions, are also updated.  Subsequently, a Draw call is
	received and each of the windows are asked to redraw
	themselves.
      </para>
      <example>
        <code lang="c#">
// Default case
// 
// Single director/viewport
// Layer's camera uses default visible bounds given by window design resolution
// Default viewport takes up entire window screen

public class AppDelegate : CCApplicationDelegate
{
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
        mainWindow.SetDesignResolutionSize(960, 640, CCSceneResolutionPolicy.ShowAll);

        CCScene scene = new CCScene(mainWindow);
        CCLayer layer = new MyLayer();

        scene.AddChild(layer);
        sharedWindow.RunWithScene(scene);
    }
}

//  Custom camera
// 
// As above, with the exception that layer uses custom camera

public class AppDelegate : CCApplicationDelegate
{
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
        mainWindow.SetDesignResolutionSize(960, 640, CCSceneResolutionPolicy.ShowAll);

        var scene = new CCScene(mainWindow);
        var layer = new MyLayer();

        var cameraVisibleBounds = new CCSize(1000, 500);
        var cameraTarget = new CCPoint3(0, 0, 3);
        var cameraPosition = new CCPoint3(0, 0, 100);
        var camera = new CCCamera(cameraVisibleBounds, cameraPosition, cameraTarget);
        
        layer.Camera = Camera;

        scene.AddChild(layer);
        sharedWindow.RunWithScene(scene);
    }
}

// Custom viewport
// 
// As with the default, with the exception that the scene uses a custom viewport

public class AppDelegate : CCApplicationDelegate
{
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
        mainWindow.SetDesignResolutionSize(960, 640, CCSceneResolutionPolicy.ShowAll);
        
        // Specify the ratio of the screen to occupy
        // Note: top-left corner represents origin in screen space
        CCViewport topLeftViewport = new CCViewport(new CCRect(0.0f, 0.0f, 0.5f, 0.5f));

        var scene = new CCScene(mainWindow, topLeftViewport);
        
        // Make sure we set custom policy, or else we to default to policy set by window
        // i.e. CCSceneResolutionPolicy.ShowAll implies that entire screen is used
        scene.SceneResolutionPolicy = CCSceneResolutionPolicy.Custom;

        var layer = new MyLayer();

        scene.AddChild(layer);
        sharedWindow.RunWithScene(scene);
    }
}

// Multiple running scenes/viewport
// 
// Create multiple scene directors to have multiple running scenes

public class AppDelegate : CCApplicationDelegate
{
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
        mainWindow.SetDesignResolutionSize(960, 640, CCSceneResolutionPolicy.ShowAll);

        var topLeftViewport = new CCViewport(new CCRect(0.0f, 0.0f, 0.5f, 0.5f));
        var topRightViewport = new CCViewport(new CCRect(0.5f, 0.0f, 0.5f, 0.5f));

        var sceneDirector1 = new CCDirector();
        var sceneDirector2 = new CCDirector();

        var scene1 = new CCScene(mainWindow, topLeftViewport, sceneDirector1) {
            SceneResolutionPolicy = CCSceneResolutionPolicy.Custom
	};

        CCScene scene2 = new CCScene(mainWindow, topRightViewport, sceneDirector2) {
            SceneResolutionPolicy = CCSceneResolutionPolicy.Custom 
        };

        var layer1 = new MyLayer();
        var layer2 = new MyLayer2();

        scene1.AddChild(layer1);
        scene2.AddChild(layer2);

        sceneDirector1.RunWithScene(scene1);
        sceneDirector2.RunWithScene(scene2);
    }
}
	</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCApplication (bool isFullScreen = true, Nullable&lt;CocosSharp.CCSize&gt; mainWindowSizeInPixels = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isFullScreen, valuetype System.Nullable`1&lt;valuetype CocosSharp.CCSize&gt; mainWindowSizeInPixels) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="isFullScreen" Type="System.Boolean" />
        <Parameter Name="mainWindowSizeInPixels" Type="System.Nullable&lt;CocosSharp.CCSize&gt;" />
      </Parameters>
      <Docs>
        <param name="isFullScreen">Whether this should take over the entire screen.</param>
        <param name="mainWindowSizeInPixels">The size in pixels for the main window.</param>
        <summary>Initializes the application.</summary>
        <remarks>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionManager">
      <MemberSignature Language="C#" Value="public CocosSharp.CCActionManager ActionManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCActionManager ActionManager" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationInterval">
      <MemberSignature Language="C#" Value="public virtual double AnimationInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 AnimationInterval" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Callback by  for limit FPS.  The time, expressed in seconds, between current frame and next. </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationDelegate">
      <MemberSignature Language="C#" Value="public CocosSharp.CCApplicationDelegate ApplicationDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCApplicationDelegate ApplicationDelegate" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCApplicationDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearTouches">
      <MemberSignature Language="C#" Value="public void ClearTouches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearTouches() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentRootDirectory">
      <MemberSignature Language="C#" Value="public string ContentRootDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentRootDirectory" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSearchPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ContentSearchPaths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ContentSearchPaths" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSearchResolutionOrder">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ContentSearchResolutionOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ContentSearchResolutionOrder" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentOrientation">
      <MemberSignature Language="C#" Value="public CocosSharp.CCDisplayOrientation CurrentOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCDisplayOrientation CurrentOrientation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCDisplayOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override void Draw (Microsoft.Xna.Framework.GameTime gameTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw(class Microsoft.Xna.Framework.GameTime gameTime) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameTime" Type="Microsoft.Xna.Framework.GameTime" />
      </Parameters>
      <Docs>
        <param name="gameTime">Snapshot of the game timing state expressed in values that can be used both by variable-step (real time) or fixed-step (game time) games.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitGame">
      <MemberSignature Language="C#" Value="public void ExitGame ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitGame() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleMediaStateAutomatically">
      <MemberSignature Language="C#" Value="public bool HandleMediaStateAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandleMediaStateAutomatically" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitInstance">
      <MemberSignature Language="C#" Value="public virtual bool InitInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InitInstance() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadContent">
      <MemberSignature Language="C#" Value="protected override void LoadContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadContent() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MainWindow">
      <MemberSignature Language="C#" Value="public CocosSharp.CCWindow MainWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCWindow MainWindow" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The window that is currently receiving events.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paused">
      <MemberSignature Language="C#" Value="public bool Paused { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Paused" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the game has been paused or not.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    When the game is paused the Update method on the <see cref="T:CocosSharp.CCWindow" /> is not invoked.  When the
	    game is paused, touches, keyboard and mouse events are
	    still dispatched, this allows a paused game to receive
	    events that would allow the game to resume execution.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferMultiSampling">
      <MemberSignature Language="C#" Value="public bool PreferMultiSampling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreferMultiSampling" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeAllCachedData">
      <MemberSignature Language="C#" Value="public void PurgeAllCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PurgeAllCachedData() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public CocosSharp.CCScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScheduler Scheduler" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartGame">
      <MemberSignature Language="C#" Value="public void StartGame ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartGame() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleFullScreen">
      <MemberSignature Language="C#" Value="public void ToggleFullScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToggleFullScreen() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override void Update (Microsoft.Xna.Framework.GameTime gameTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Update(class Microsoft.Xna.Framework.GameTime gameTime) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameTime" Type="Microsoft.Xna.Framework.GameTime" />
      </Parameters>
      <Docs>
        <param name="gameTime">Snapshot of the game timing state expressed in values that can be used both by variable-step (real time) or fixed-step (game time) games.</param>
        <summary>Method invoked during each iteration of the game run loop.</summary>
        <remarks>
          <para>
	    This method is invoked on each iteration of the game loop,
	    and receives the gameTime parameter.  This method
	    processes inputs events and passes the events to the
	    running windows owned by the CCApplication.
	  </para>
          <para>
	    The pause state (controlled by the method <see cref="M:CocosSharp.CCApplication.PauseGame" />) determines
	    whether the windows receive the Update method call or not.
	  </para>
          <para>
	    This method dispatches touches, keyboard and mouse events
	    to the window regardless of the paused state.
	  </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
