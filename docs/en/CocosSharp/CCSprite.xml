<Type Name="CCSprite" FullName="CocosSharp.CCSprite">
  <TypeSignature Language="C#" Value="public class CCSprite : CocosSharp.CCNode, CocosSharp.ICCTexture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCSprite extends CocosSharp.CCNode implements class CocosSharp.ICCBlendable, class CocosSharp.ICCTexture" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CocosSharp.ICCTexture</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> is a 2d image ( http://en.wikipedia.org/wiki/Sprite_(computer_graphics) )</summary>
    <remarks>
      <para>
        <see cref="T:CocosSharp.CCSprite" /> is a 2d image ( <ulink url="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)">http://en.wikipedia.org/wiki/Sprite_(computer_graphics)</ulink> )</para>
      <see cref="T:CocosSharp.CCSprite" />
      <ulink url="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)">http://en.wikipedia.org/wiki/Sprite_(computer_graphics)</ulink>
      <para>
        <see cref="T:CocosSharp.CCSprite" /> can be created with an image, or with a sub-rectangle of an image.</para>
      <see cref="T:CocosSharp.CCSprite" />
      <para>If the parent or any of its ancestors is a <see cref="T:CocosSharp.CCSpriteBatchNode" /> then the following features/limitations are valid<list type="bullet" /></para>
      <see cref="T:CocosSharp.CCSpriteBatchNode" />
      <list type="bullet" />
      <para>If the parent is an standard <see cref="T:CocosSharp.CCNode" />, then <see cref="T:CocosSharp.CCSprite" /> behaves like any other <see cref="T:CocosSharp.CCNode" />:<list type="bullet" /></para>
      <see cref="T:CocosSharp.CCNode" />
      <see cref="T:CocosSharp.CCSprite" />
      <see cref="T:CocosSharp.CCNode" />
      <list type="bullet" />
      <para>The default anchorPoint in <see cref="T:CocosSharp.CCSprite" /> is (0.5, 0.5). </para>
      <see cref="T:CocosSharp.CCSprite" />
      <item>
        <description>Features when the parent is a BatchNode:MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.</description>
      </item>
      <description>Features when the parent is a BatchNode:MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.</description>
      <item>
        <description>MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.</description>
      </item>
      <description>MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.</description>
      <item>
        <description>LimitationsCamera is not supported yet (eg: OrbitCamera action doesn't work)GridBase actions are not supported (eg: Lens, Ripple, Twirl)The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.Parallax scroller is not supported, but can be simulated with a "proxy" sprite.</description>
      </item>
      <description>LimitationsCamera is not supported yet (eg: OrbitCamera action doesn't work)GridBase actions are not supported (eg: Lens, Ripple, Twirl)The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.Parallax scroller is not supported, but can be simulated with a "proxy" sprite.</description>
      <item>
        <description>Camera is not supported yet (eg: OrbitCamera action doesn't work)</description>
      </item>
      <description>Camera is not supported yet (eg: OrbitCamera action doesn't work)</description>
      <item>
        <description>GridBase actions are not supported (eg: Lens, Ripple, Twirl)</description>
      </item>
      <description>GridBase actions are not supported (eg: Lens, Ripple, Twirl)</description>
      <item>
        <description>The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.</description>
      </item>
      <description>The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.</description>
      <item>
        <description>The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.</description>
      </item>
      <description>The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.</description>
      <item>
        <description>Parallax scroller is not supported, but can be simulated with a "proxy" sprite.</description>
      </item>
      <description>Parallax scroller is not supported, but can be simulated with a "proxy" sprite.</description>
      <item>
        <description>It supports blending functions</description>
      </item>
      <description>It supports blending functions</description>
      <item>
        <description>It supports aliasing / antialiasing</description>
      </item>
      <description>It supports aliasing / antialiasing</description>
      <item>
        <description>But the rendering will be slower: 1 draw per children.</description>
      </item>
      <description>But the rendering will be slower: 1 draw per children.</description>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (CocosSharp.CCSpriteFrame spriteFrame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCSpriteFrame spriteFrame) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="spriteFrame" Type="CocosSharp.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="spriteFrame">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (CocosSharp.CCSize contentSize, CocosSharp.CCSpriteFrame spriteFrame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CocosSharp.CCSize contentSize, class CocosSharp.CCSpriteFrame spriteFrame) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="contentSize" Type="CocosSharp.CCSize" />
        <Parameter Name="spriteFrame" Type="CocosSharp.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="contentSize">To be added.</param>
        <param name="spriteFrame">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (string fileName, Nullable&lt;CocosSharp.CCRect&gt; texRectInPixels = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, valuetype System.Nullable`1&lt;valuetype CocosSharp.CCRect&gt; texRectInPixels) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="texRectInPixels" Type="System.Nullable&lt;CocosSharp.CCRect&gt;" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <param name="texRectInPixels">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (CocosSharp.CCTexture2D texture = null, Nullable&lt;CocosSharp.CCRect&gt; texRectInPixels = null, bool rotated = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCTexture2D texture, valuetype System.Nullable`1&lt;valuetype CocosSharp.CCRect&gt; texRectInPixels, bool rotated) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="texture" Type="CocosSharp.CCTexture2D" />
        <Parameter Name="texRectInPixels" Type="System.Nullable&lt;CocosSharp.CCRect&gt;" />
        <Parameter Name="rotated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="texRectInPixels">To be added.</param>
        <param name="rotated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public override void AddChild (CocosSharp.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddChild(class CocosSharp.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)</param>
        <param name="tag">A interger to identify the node easily. Please refer to setTag(int)</param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>
          <para>Adds a child to the container with z order and tag</para>
          <para>If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AtlasIndex">
      <MemberSignature Language="C#" Value="public int AtlasIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AtlasIndex" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the index used on the . Don't modify this value unless you know what you are doing </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BatchNode">
      <MemberSignature Language="C#" Value="public CocosSharp.CCSpriteBatchNode BatchNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCSpriteBatchNode BatchNode" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSpriteBatchNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the batch node to sprite This method is not recommended for game developers. Sample code for using batch node SpriteBatchNode*batch=SpriteBatchNode::create("Images/grossini_dance_atlas.png",15);Sprite*sprite=Sprite::createWithTexture(batch-&gt;getTexture(),Rect(0,0,57,57));batch-&gt;addChild(sprite);layer-&gt;addChild(batch);</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BlendFunc">
      <MemberSignature Language="C#" Value="public CocosSharp.CCBlendFunc BlendFunc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCBlendFunc BlendFunc" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCBlendFunc</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the blending function that is currently being used.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the blending function that is currently being used.</para>
          <para>
            <para>A <see cref="T:CocosSharp.CCBlendFunc" /> structure with source and destination factor which specified pixel arithmetic. </para>
          </para>
          <para>A <see cref="T:CocosSharp.CCBlendFunc" /> structure with source and destination factor which specified pixel arithmetic. </para>
          <see cref="T:CocosSharp.CCBlendFunc" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCColor3B Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCColor3B Color" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCColor3B</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the color with R,G,B bytes</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the color with R,G,B bytes</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCSize ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCSize ContentSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public override void Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="protected override void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node. The following GL states will be enabled by default:</summary>
        <remarks>
          <para>Override this method to draw your own node. The following GL states will be enabled by default:<list type="bullet" /></para>
          <list type="bullet" />
          <item>
            <description>glEnableClientState(GL_VERTEX_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_VERTEX_ARRAY);</description>
          <item>
            <description>glEnableClientState(GL_COLOR_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_COLOR_ARRAY);</description>
          <item>
            <description>glEnableClientState(GL_TEXTURE_COORD_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_TEXTURE_COORD_ARRAY);</description>
          <item>
            <description>glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </description>
          </item>
          <description>glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </description>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipX">
      <MemberSignature Language="C#" Value="public bool FlipX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the sprite should be flipped horizontally or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the sprite should be flipped horizontally or not.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipY">
      <MemberSignature Language="C#" Value="public bool FlipY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the sprite should be flipped vertically or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the sprite should be flipped vertically or not.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAntialiased">
      <MemberSignature Language="C#" Value="public bool IsAntialiased { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAntialiased" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsColorModifiedByOpacity">
      <MemberSignature Language="C#" Value="public override bool IsColorModifiedByOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsColorModifiedByOpacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpriteFrameDisplayed">
      <MemberSignature Language="C#" Value="public bool IsSpriteFrameDisplayed (CocosSharp.CCSpriteFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSpriteFrameDisplayed(class CocosSharp.CCSpriteFrame frame) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="CocosSharp.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="frame">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextureRectRotated">
      <MemberSignature Language="C#" Value="public bool IsTextureRectRotated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextureRectRotated" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the texture rectangle is rotated. </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public override byte Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Opacity" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the opacity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the opacity.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentUpdatedTransform">
      <MemberSignature Language="C#" Value="protected override void ParentUpdatedTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ParentUpdatedTransform() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCPoint Position" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the position (x,y) of the node in OpenGL coordinates</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the position (x,y) of the node in OpenGL coordinates</para>
          <para>Usually we use Point(x,y) to compose Point object. The original point (0,0) is at the left-bottom corner of screen. For example, this codesnip sets the node in the center of screen. <programlisting><codeline><highlight class="normal">Size<sp />size<sp />=<sp /><ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member">Director::getInstance</ref>()-&gt;<ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member">getWinSize</ref>();</highlight></codeline><codeline><highlight class="normal">node-&gt;setPosition(<sp />Point(size.width/2,<sp />size.height/2)<sp />)</highlight></codeline></programlisting></para>
          <programlisting>
            <codeline>
              <highlight class="normal">Size<sp />size<sp />=<sp /><ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member">Director::getInstance</ref>()-&gt;<ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member">getWinSize</ref>();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">node-&gt;setPosition(<sp />Point(size.width/2,<sp />size.height/2)<sp />)</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="normal">Size<sp />size<sp />=<sp /><ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member">Director::getInstance</ref>()-&gt;<ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member">getWinSize</ref>();</highlight>
          </codeline>
          <highlight class="normal">Size<sp />size<sp />=<sp /><ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member">Director::getInstance</ref>()-&gt;<ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member">getWinSize</ref>();</highlight>
          <sp />
          <sp />
          <sp />
          <ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member">Director::getInstance</ref>
          <ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member">getWinSize</ref>
          <codeline>
            <highlight class="normal">node-&gt;setPosition(<sp />Point(size.width/2,<sp />size.height/2)<sp />)</highlight>
          </codeline>
          <highlight class="normal">node-&gt;setPosition(<sp />Point(size.width/2,<sp />size.height/2)<sp />)</highlight>
          <sp />
          <sp />
          <sp />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="quad">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCV3F_C4B_T2F_Quad quad;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype CocosSharp.CCV3F_C4B_T2F_Quad quad" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCV3F_C4B_T2F_Quad</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Quad">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCV3F_C4B_T2F_Quad Quad { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCV3F_C4B_T2F_Quad Quad" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCV3F_C4B_T2F_Quad</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public override void RemoveAllChildren (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAllChildren(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override void RemoveChild (CocosSharp.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveChild(class CocosSharp.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The child node which will be removed. </param>
        <param name="cleanup">true if all running actions and callbacks on the child node will be cleanup, false otherwise. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>
          <para>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public override void ReorderChild (CocosSharp.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ReorderChild(class CocosSharp.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CocosSharp.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>
          <para>Reorders a child according to a new z value.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public override float Rotation { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the rotation (angle) of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets the rotation (angle) of the node in degrees.</para>
          <para>0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public override float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the X rotation (angle) of the node in degrees which performs a horizontal rotational skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets the X rotation (angle) of the node in degrees which performs a horizontal rotational skew.</para>
          <para>0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public override float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</para>
          <para>0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTo">
      <MemberSignature Language="C#" Value="public virtual void ScaleTo (CocosSharp.CCSize size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScaleTo(valuetype CocosSharp.CCSize size) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CocosSharp.CCSize" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public override float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the scale factor on X axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the scale factor on X axis of this node</para>
          <para>The deafult value is 1.0 if you haven't changed it before</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public override float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the scale factor on Y axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the scale factor on Y axis of this node</para>
          <para>The Default value is 1.0 if you haven't changed it before.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public override void Serialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Serialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReorderChildDirtyRecursively">
      <MemberSignature Language="C#" Value="public virtual void SetReorderChildDirtyRecursively ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetReorderChildDirtyRecursively() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpriteFrameWithAnimationName">
      <MemberSignature Language="C#" Value="public void SetSpriteFrameWithAnimationName (string animationName, int frameIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpriteFrameWithAnimationName(string animationName, int32 frameIndex) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animationName" Type="System.String" />
        <Parameter Name="frameIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="animationName">To be added.</param>
        <param name="frameIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public override float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the X skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the X skew angle of the node in degrees.</para>
          <para>This angle describes the shear distortion in the X direction. Thus, it is the angle between the Y axis and the left edge of the shape The default skewX angle is 0. Positive values distort the node in a CW direction.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public override float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the Y skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the Y skew angle of the node in degrees.</para>
          <para>This angle describes the shear distortion in the Y direction. Thus, it is the angle between the X axis and the bottom edge of the shape The default skewY angle is 0. Positive values distort the node in a CCW direction.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortAllChildren">
      <MemberSignature Language="C#" Value="public override void SortAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SortAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. Don't call this manually unless a child added needs to be removed in the same frame </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SpriteFrame">
      <MemberSignature Language="C#" Value="public CocosSharp.CCSpriteFrame SpriteFrame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCSpriteFrame SpriteFrame" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCSpriteFrame</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Texture">
      <MemberSignature Language="C#" Value="public virtual CocosSharp.CCTexture2D Texture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCTexture2D Texture" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCTexture2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the currently used texture</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the currently used texture</para>
          <para>
            <para>The texture that is currenlty being used. </para>
          </para>
          <para>The texture that is currenlty being used. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureRectInPixels">
      <MemberSignature Language="C#" Value="public CocosSharp.CCRect TextureRectInPixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCRect TextureRectInPixels" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformedQuad">
      <MemberSignature Language="C#" Value="protected CocosSharp.CCV3F_C4B_T2F_Quad TransformedQuad { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CocosSharp.CCV3F_C4B_T2F_Quad TransformedQuad" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCV3F_C4B_T2F_Quad</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBlendFunc">
      <MemberSignature Language="C#" Value="protected void UpdateBlendFunc ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBlendFunc() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateColor">
      <MemberSignature Language="C#" Value="public override void UpdateColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateColor() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTransformedSpriteTextureQuads">
      <MemberSignature Language="C#" Value="public void UpdateTransformedSpriteTextureQuads ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateTransformedSpriteTextureQuads() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
