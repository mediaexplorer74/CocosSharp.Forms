<Type Name="CCActionTween" FullName="CocosSharp.CCActionTween">
  <TypeSignature Language="C#" Value="public class CCActionTween : CocosSharp.CCFiniteTimeAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCActionTween extends CocosSharp.CCFiniteTimeAction" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCFiniteTimeAction</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ActionTween
</summary>
    <remarks>
      <para>
        <verbatim>ActionTween
</verbatim>
      </para>
      <verbatim>ActionTween
</verbatim>
      <para>
        <see cref="T:CocosSharp.CCActionTween" /> is an action that lets you update any property of an object. For example, if you want to modify the "width" property of a target from 200 to 300 in 2 seconds, then:</para>
      <see cref="T:CocosSharp.CCActionTween" />
      <para>id modifyWidth = [<see cref="T:CocosSharp.CCActionTween" /> actionWithDuration:2 key:"width" from:200 to:300]; [target runAction:modifyWidth];</para>
      <see cref="T:CocosSharp.CCActionTween" />
      <para>Another example: <see cref="T:CocosSharp.CCScaleTo" /> action could be rewritten using PropertyAction:</para>
      <see cref="T:CocosSharp.CCScaleTo" />
      <para>scaleA and scaleB are equivalents id scaleA = [<see cref="T:CocosSharp.CCScaleTo" /> actionWithDuration:2 scale:3]; id scaleB = [<see cref="T:CocosSharp.CCActionTween" /> actionWithDuration:2 key:"scale" from:1 to:3];</para>
      <see cref="T:CocosSharp.CCScaleTo" />
      <see cref="T:CocosSharp.CCActionTween" />
      <para>
        <para>v0.99.2 </para>
      </para>
      <para>v0.99.2 </para>
      <para kind="tool">When this action is added to a CCNode, the action will run over a period of time.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionTween (float duration, string key, float from, float to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 duration, string key, float32 from, float32 to) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="duration" Type="System.Single" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="from" Type="System.Single" />
        <Parameter Name="to" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="duration">To be added.</param>
        <param name="key">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <summary>creates an initializes the action with the property name (key), and the from and to parameters. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionTween (float duration, string key, float from, float to, Action&lt;float,string&gt; tweenAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 duration, string key, float32 from, float32 to, class System.Action`2&lt;float32, string&gt; tweenAction) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="duration" Type="System.Single" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="from" Type="System.Single" />
        <Parameter Name="to" Type="System.Single" />
        <Parameter Name="tweenAction" Type="System.Action&lt;System.Single,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="duration">To be added.</param>
        <param name="key">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="tweenAction">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public float From { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 From" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public string Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Key" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCFiniteTimeAction Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class CocosSharp.CCFiniteTimeAction Reverse() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCFiniteTimeAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>returns a new reversed action </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected override CocosSharp.CCActionState StartAction (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class CocosSharp.CCActionState StartAction(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">Target object on which the action will be performed.</param>
        <summary>
          <para kind="tool">Starts the action on the specified target</para>
        </summary>
        <returns>
        </returns>
        <remarks>
          <para kind="tool">This creates a new state object of type <see cref="T:CocosSharp.CCActionState" /> that will track the state of the action.</para>
          <para kind="tool">This method is typically invoked by implementations of CCActions or by the CocosSharp runtime, when you invoke the <see cref="M:CocosSharp.CCNode.AddAction" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public float To { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 To" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TweenAction">
      <MemberSignature Language="C#" Value="public Action&lt;float,string&gt; TweenAction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`2&lt;float32, string&gt; TweenAction" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Single,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
