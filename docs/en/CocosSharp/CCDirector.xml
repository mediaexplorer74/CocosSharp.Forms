<Type Name="CCDirector" FullName="CocosSharp.CCDirector">
  <TypeSignature Language="C#" Value="public class CCDirector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCDirector extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      Maintains the <see cref="T:CocosSharp.CCScene" /> objects that are in charge of displaying your game elements.
    </summary>
    <remarks>
      <para>
	The director maintains a stack of <see cref="T:CocosSharp.CCScene" /> objects that can be pushed, popped
	or replaced throughout the director’s lifetime. 
      </para>
      <para>
	
	The top-most scene on the stack is referred to as the
	RunningScene.
      </para>
      <para>
        <see cref="T:CocosSharp.CCWindow" /> maintains a list of
	CCDirector objects.  During a window’s draw call, the window
	iterates through each its directors and asks each of their
	corresponding running scene’s to draw.
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCDirector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates a new CCDirector.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPopScene">
      <MemberSignature Language="C#" Value="public bool CanPopScene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPopScene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the current scene can be popped (this means, there is more than one scene in the director).</summary>
        <value>True if the PopScene method can be invoked.</value>
        <remarks>This returns true if there is more than one scene being managed by this director.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeState">
      <MemberSignature Language="C#" Value="public bool DeserializeState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DeserializeState() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the serialized state of the director and all of its scenes.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSendCleanupToScene">
      <MemberSignature Language="C#" Value="public bool IsSendCleanupToScene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendCleanupToScene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopScene">
      <MemberSignature Language="C#" Value="public void PopScene ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopScene() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pops out a scene from the queue. This scene will replace the running one. The running scene will be deleted. If there are no more scenes in the stack the execution is terminated. ONLY call it if there is a running scene. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PopScene">
      <MemberSignature Language="C#" Value="public void PopScene (float t, CocosSharp.CCTransitionScene s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopScene(float32 t, class CocosSharp.CCTransitionScene s) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Single" />
        <Parameter Name="s" Type="CocosSharp.CCTransitionScene" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopToRootScene">
      <MemberSignature Language="C#" Value="public void PopToRootScene ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopToRootScene() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pops out all scenes from the queue until the root scene in the queue. This scene will replace the running one. Internally it will call popToSceneStackLevel(1)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PopToSceneStackLevel">
      <MemberSignature Language="C#" Value="public void PopToSceneStackLevel (int level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopToSceneStackLevel(int32 level) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="level">To be added.</param>
        <summary>Pops out all scenes from the queue until it reaches level. If level is 0, it will end the director. If level is 1, it will pop all scenes until it reaches to root scene. If level is &lt;= than the current stack level, it won't do anything. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PushScene">
      <MemberSignature Language="C#" Value="public void PushScene (CocosSharp.CCScene pScene);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushScene(class CocosSharp.CCScene pScene) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pScene" Type="CocosSharp.CCScene" />
      </Parameters>
      <Docs>
        <param name="pScene">Scene to activate.</param>
        <summary>Suspends the execution of the running scene, pushing it on the stack of suspended scenes.</summary>
        <remarks>
          <para>The new scene will be executed. Try to avoid big stacks of pushed scenes to reduce memory allocation. </para>
          <para>Only call it if there is a running scene.  If you do not have a running scene, call <see cref="M:CocosSharp.CCDirector.RunWithScene" /> instead.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceScene">
      <MemberSignature Language="C#" Value="public void ReplaceScene (CocosSharp.CCScene scene);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceScene(class CocosSharp.CCScene scene) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scene" Type="CocosSharp.CCScene" />
      </Parameters>
      <Docs>
        <param name="scene">Scene that will take the place of the current scene.</param>
        <summary>Replaces the running scene with a new one. The running scene is terminated. </summary>
        <remarks>
	  Must be called only if there is a running scene. 
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetSceneStack">
      <MemberSignature Language="C#" Value="public void ResetSceneStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSceneStack() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the scene stack, stopping execution.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningScene">
      <MemberSignature Language="C#" Value="public CocosSharp.CCScene RunningScene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene RunningScene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get currently running scene.</summary>
        <value>
        </value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RunWithScene">
      <MemberSignature Language="C#" Value="public void RunWithScene (CocosSharp.CCScene scene);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWithScene(class CocosSharp.CCScene scene) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scene" Type="CocosSharp.CCScene" />
      </Parameters>
      <Docs>
        <param name="scene">The scene to start.</param>
        <summary>Enters the main loop and starts your first scene.</summary>
        <remarks>
          <para>Enters the <see cref="T:CocosSharp.CCDirector" />'s
          main loop with the given <see cref="T:CocosSharp.CCScene" />. Call it to run only your first scene, do not call it if
          there is already a running scene.</para>
          <para>This will call <see cref="M:CocosSharp.CCDirectory.PushScene" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SceneCount">
      <MemberSignature Language="C#" Value="public int SceneCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SceneCount" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of scenes on the stack.</summary>
        <value>Scene count.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeState">
      <MemberSignature Language="C#" Value="public void SerializeState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SerializeState() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Write out the current state of the director and all of its scenes.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
