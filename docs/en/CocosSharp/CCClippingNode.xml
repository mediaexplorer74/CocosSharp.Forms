<Type Name="CCClippingNode" FullName="CocosSharp.CCClippingNode">
  <TypeSignature Language="C#" Value="public class CCClippingNode : CocosSharp.CCNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCClippingNode extends CocosSharp.CCNode" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> is a subclass of . It draws its content (childs) clipped using a stencil. The stencil is an other  that will not be drawn. The clipping is done using the alpha part of the stencil (adjusted with an alphaThreshold). </summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCClippingNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates and initializes a clipping node with an other node as its stencil. The stencil node will be retained. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCClippingNode (CocosSharp.CCNode stencil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCNode stencil) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="stencil" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="stencil">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlphaThreshold">
      <MemberSignature Language="C#" Value="public float AlphaThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 AlphaThreshold" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The alpha threshold. The content is drawn only where the stencil have pixel with alpha greater than the alphaThreshold. Should be a float between 0 and 1. This default to 1 (so alpha test is disabled). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverted">
      <MemberSignature Language="C#" Value="public bool Inverted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inverted" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="public override void OnEnter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnEnter() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time when  enters the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a "sister/brother" node. If you override onEnter, you shall call its parent's one, e.g., Node::onEnter(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnEnterTransitionDidFinish">
      <MemberSignature Language="C#" Value="public override void OnEnterTransitionDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnEnterTransitionDidFinish() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked when the  enters in the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call its parent's one, e.g. Node::onEnterTransitionDidFinish()</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="public override void OnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnExit() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call its parent's one, e.g., Node::onExit(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExitTransitionDidStart">
      <MemberSignature Language="C#" Value="public override void OnExitTransitionDidStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnExitTransitionDidStart() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is called every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this callback is called when the transition starts. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCScene Scene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCScene Scene" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stencil">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode Stencil { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Stencil" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The  to use as a stencil to do the clipping. The stencil node will be retained. This default to nil. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
